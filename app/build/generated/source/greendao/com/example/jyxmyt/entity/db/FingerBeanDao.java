package com.example.jyxmyt.entity.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINGER_BEAN".
*/
public class FingerBeanDao extends AbstractDao<FingerBean, Long> {

    public static final String TABLENAME = "FINGER_BEAN";

    /**
     * Properties of entity FingerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FingerSynoId = new Property(1, int.class, "fingerSynoId", false, "FINGER_SYNO_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property KssArea = new Property(3, String.class, "kssArea", false, "KSS_AREA");
        public final static Property KssFeatureNumFirst = new Property(4, String.class, "kssFeatureNumFirst", false, "KSS_FEATURE_NUM_FIRST");
        public final static Property KssFeatureNumSecond = new Property(5, String.class, "kssFeatureNumSecond", false, "KSS_FEATURE_NUM_SECOND");
        public final static Property KssPrisonerName = new Property(6, String.class, "kssPrisonerName", false, "KSS_PRISONER_NAME");
        public final static Property KssPrisonerNum = new Property(7, String.class, "kssPrisonerNum", false, "KSS_PRISONER_NUM");
        public final static Property KssRoomNum = new Property(8, String.class, "kssRoomNum", false, "KSS_ROOM_NUM");
        public final static Property KssState = new Property(9, String.class, "kssState", false, "KSS_STATE");
    }


    public FingerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FingerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINGER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FINGER_SYNO_ID\" INTEGER NOT NULL ," + // 1: fingerSynoId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"KSS_AREA\" TEXT," + // 3: kssArea
                "\"KSS_FEATURE_NUM_FIRST\" TEXT," + // 4: kssFeatureNumFirst
                "\"KSS_FEATURE_NUM_SECOND\" TEXT," + // 5: kssFeatureNumSecond
                "\"KSS_PRISONER_NAME\" TEXT," + // 6: kssPrisonerName
                "\"KSS_PRISONER_NUM\" TEXT," + // 7: kssPrisonerNum
                "\"KSS_ROOM_NUM\" TEXT," + // 8: kssRoomNum
                "\"KSS_STATE\" TEXT);"); // 9: kssState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINGER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FingerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFingerSynoId());
        stmt.bindLong(3, entity.getType());
 
        String kssArea = entity.getKssArea();
        if (kssArea != null) {
            stmt.bindString(4, kssArea);
        }
 
        String kssFeatureNumFirst = entity.getKssFeatureNumFirst();
        if (kssFeatureNumFirst != null) {
            stmt.bindString(5, kssFeatureNumFirst);
        }
 
        String kssFeatureNumSecond = entity.getKssFeatureNumSecond();
        if (kssFeatureNumSecond != null) {
            stmt.bindString(6, kssFeatureNumSecond);
        }
 
        String kssPrisonerName = entity.getKssPrisonerName();
        if (kssPrisonerName != null) {
            stmt.bindString(7, kssPrisonerName);
        }
 
        String kssPrisonerNum = entity.getKssPrisonerNum();
        if (kssPrisonerNum != null) {
            stmt.bindString(8, kssPrisonerNum);
        }
 
        String kssRoomNum = entity.getKssRoomNum();
        if (kssRoomNum != null) {
            stmt.bindString(9, kssRoomNum);
        }
 
        String kssState = entity.getKssState();
        if (kssState != null) {
            stmt.bindString(10, kssState);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FingerBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFingerSynoId());
        stmt.bindLong(3, entity.getType());
 
        String kssArea = entity.getKssArea();
        if (kssArea != null) {
            stmt.bindString(4, kssArea);
        }
 
        String kssFeatureNumFirst = entity.getKssFeatureNumFirst();
        if (kssFeatureNumFirst != null) {
            stmt.bindString(5, kssFeatureNumFirst);
        }
 
        String kssFeatureNumSecond = entity.getKssFeatureNumSecond();
        if (kssFeatureNumSecond != null) {
            stmt.bindString(6, kssFeatureNumSecond);
        }
 
        String kssPrisonerName = entity.getKssPrisonerName();
        if (kssPrisonerName != null) {
            stmt.bindString(7, kssPrisonerName);
        }
 
        String kssPrisonerNum = entity.getKssPrisonerNum();
        if (kssPrisonerNum != null) {
            stmt.bindString(8, kssPrisonerNum);
        }
 
        String kssRoomNum = entity.getKssRoomNum();
        if (kssRoomNum != null) {
            stmt.bindString(9, kssRoomNum);
        }
 
        String kssState = entity.getKssState();
        if (kssState != null) {
            stmt.bindString(10, kssState);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FingerBean readEntity(Cursor cursor, int offset) {
        FingerBean entity = new FingerBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // fingerSynoId
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // kssArea
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kssFeatureNumFirst
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // kssFeatureNumSecond
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // kssPrisonerName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // kssPrisonerNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // kssRoomNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // kssState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FingerBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFingerSynoId(cursor.getInt(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setKssArea(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKssFeatureNumFirst(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKssFeatureNumSecond(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKssPrisonerName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKssPrisonerNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKssRoomNum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKssState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FingerBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FingerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FingerBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
